plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'kr.re.dslab'
version = '1.0.0'

bootJar {
	archiveFileName = 'threat-modeling.jar'
}

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web' // 웹 MVC
	implementation 'org.springframework.boot:spring-boot-starter-aop' // Spring AOP
	implementation 'org.springframework.boot:spring-boot-starter-security' // Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-cache' // Spring Cache
	implementation 'com.github.ben-manes.caffeine:caffeine' // Caffeine Cache
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // MariaDB JDBC Driver

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0' // Swagger
	implementation 'com.google.code.gson:gson:2.10.1' // JSON 라이브러리
	compileOnly 'org.projectlombok:lombok' // 롬복
	annotationProcessor 'org.projectlombok:lombok' // 롬복

	implementation 'commons-io:commons-io:2.13.0' // Apache Commons IO
	implementation 'com.google.guava:guava:32.1.2-jre' // Google Core Libraries For Java

	testImplementation 'org.springframework.boot:spring-boot-starter-test' // Test
	testImplementation 'org.springframework.security:spring-security-test' // Spring Security Test

	implementation 'com.navercorp.lucy:lucy-xss-servlet:2.0.0' // Lucy XSS Servlet Filter
	implementation 'com.navercorp.lucy:lucy-xss:1.6.3' // Lucy XSS Filter
	implementation 'org.apache.commons:commons-text:1.10.0' // Apache Commons Text
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}